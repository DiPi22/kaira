
Kaira User Guide
=================

Kaira is as an open-source development environment for MPI (Message Passing
Interface) applications. We try to provide an unified environment for
activities for development: prototyping, programming, testing, debugging,
profiling, performance prediction and verification.

The main idea is to use visual models based on Coloured Petri Nets.
This model is designed to catch parallel aspects and communication inside of
developed application. We do not want to program applications completely in
a visual way, so our models can be enriched by any sequential C++ code.
With such model, a user can generate MPI applications, run simulations
or start stace a space analysis.

In this text, we assume that the reader is familiar with C++ and basic use
of Linux. It is not necessary to know anything about Petri nets.

Installation
------------

In the following text, we describe the installation and configuration of Kaira
as a development environment. How to prepare your system for running
applications generated by Kaira without installing "full" Kaira is described
in Section 'Generated applications running'.

Dependancies
~~~~~~~~~~~~

To run Kaira, you need the following software.

  - Linux
    * In general, Kaira should run on any UNIX-like systems where the
	  following programs and libraries are available, but it was tested
      only on Linux systems.
  - Python 2.6 or 2.7
  - PyGTK
  - PyGTK sourceview2
  - pyparsing
  - g++
  - matplotlib

Optional dependancies:

  - MPI implementation (tested with: MPICH2, OpenMP, LAM)
  - sparsehash
  - mhash
  - asciidoc

MPI implementation is necessary if you want to build MPI applications.
Libraries 'sparsehash' and 'mhash' are used by the verification subsystem.
'asciidoc' is used to build HTML documentation.


.Installing packages in Debian based distributions
*****************************************************************************

We are going to install all necessary packages including optional.
We have chosen MPICH2 as MPI implementation.

------------------------------------------------------------------------------
apt-get install python-gtksourceview2 python-pyparsing g++ python-matplotlib

# MPI implementation
apt-get install mpich2

# Libraries for verification subsystem
apt-get install sparsehash libmhash-dev

# Documentation
apt-get install asciidoc
------------------------------------------------------------------------------

******************************************************************************

Building
~~~~~~~~

The first step is to download Kaira distribution from http://verif.cs.vsb.cz and
unpack it. Kaira is built by building tool 'waf' (http://code.google.com/p/waf/).
This tool is distributed together with Kaira.
The most common scenario (with all dependancies installed) is the following:

-------------------------------------------------------------------------------
cd /path/to/kaira
./waf configure             # Configuration step
./waf                       # Building step
-------------------------------------------------------------------------------

It's all. To check that Kaira works, you can start it by

-------------------------------------------------------------------------------
./start.sh
-------------------------------------------------------------------------------

In the configuration step, additional parameters can be specified.
The basic ones are:

- '--disable-mpi' -- Kaira is built without MPI support
- '--disable-verif' -- Kaira is built without the verification support,
  i.e. libraries 'sparsehash' and 'libmhash' are not necessary
- '--disable-doc' -- Documentation is not generated
- '--icc' -- Intel's C++ complier is used to build Kaira instead of GCC.

For example, when we want to build Kaira without the support of MPI
and without generating documentation, commands are following:

-------------------------------------------------------------------------------
./waf configure --disable-mpi --disable-doc  # Configuration step
./waf                                        # Building step
-------------------------------------------------------------------------------

The full list of parameters can be displayed by

-------------------------------------------------------------------------------
./waf configure --help
-------------------------------------------------------------------------------

Hello world
-----------



Basic principles
----------------



Simulation
----------



Generating applications
-----------------------

Kaira generates the following application from a project:

release ::
traced ::
statespace ::
simulation :: Only for the internal usage by simulator, it is not inteded to be manually run by the user.


Binding types
-------------



Tracing
-------



State space analysis
--------------------



Libraries
---------



Appendix
--------

Arguments of generated programs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-p *NAME=VALUE* :: Set project parameter *NAME*
-t *N* --threads=*N* :: Set number of threads per each process
-r *N* :: Set number of processes (only in threads version)
-h --help :: Print description of project parameters
-s *PORT* :: The application listens on defined *PORT*. *PORT* can be 'auto',
           then application chooses some free port and print it on stdout as the first line.
-b :: Block the application immediately after initialization and
      wait for the first connection via port defined by -s argument.
-S :: Sequential mode. Application is run in sequentially independently on
	  number of processes or threads. (only in threads version)
-T *SIZE* :: Enables tracelogging with in-memory buffer of *SIZE* bytes,
			 suffixes K, M or G can be used
