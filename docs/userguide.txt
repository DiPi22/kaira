
Kaira User Guide
=================

Kaira is as an open-source developing environment for MPI
(Message Passing Interface) applications.
We try to provide unified environment for activities during development:
prototyping, programming, testing, debugging, profiling, performance
 prediction and verification.

The main idea is to use visual model based on Coloured Petri Nets.
It is designed to catches parallel aspects and communications of developed application. But we do not want to visually program the complete application, so this model can be enriched by any sequential C++ code. With such model, you can generate MPI application, run simulation or start stace space analysis.

In this text we assume that the reader are familiar with C++ and basic use of Linux. It is not necessary to know anything about Petri nets.

Installation
------------

In the following text, we describe the installation and configuration of Kaira as a development environment. How to prepare your system for running applications generated by Kaira without installing "full" Kaira is described in Section _Generated applications running_.

Dependancies
~~~~~~~~~~~~

To run Kaira, you need the following software.

  - Linux
    * In general, Kaira should run on any UNIX-like systems where the following programs and libraries are available, but it was tested only on Linux systems.
  - Python 2.6 or 2.7
  - PyGTK
  - PyGTK sourceview2
  - pyparsing
  - g++
  - matplotlib

In _Debian_ based distributions you can install these libraries the following way. If you are using a different Linux distribution then try to find packages with similar names in your package managment system.

-----------------------------------
$ apt-get install python-gtksourceview2 python-pyparsing g++ python-matplotlib
-----------------------------------

Optional dependancies
~~~~~~~~~~~~~~~~~~~~~





Installing
~~~~~~~~~~

Download ::
  - Kaira distribution can be downloaded from http://verif.cs.vsb.cz.
Configure

Hello world
-----------



Basic principles
----------------



Simulation
----------



Generating applications
-----------------------

Kaira generates the following application from a project:

release ::
traced ::
statespace ::
simulation :: Only for the internal usage by simulator, it is not inteded to be manually run by the user.


Binding types
-------------



Tracing
-------



State space analysis
--------------------



Libraries
---------



Appendix
--------

Arguments of generated programs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-p *NAME=VALUE* :: Set project parameter *NAME*
-t *N* --threads=*N* :: Set number of threads per each process
-r *N* :: Set number of processes (only in threads version)
-h --help :: Print description of project parameters
-s *PORT* :: The application listens on defined *PORT*. *PORT* can be 'auto',
           then application chooses some free port and print it on stdout as the first line.
-b :: Block the application immediately after initialization and
      wait for the first connection via port defined by -s argument.
-S :: Sequential mode. Application is run in sequentially independently on
	  number of processes or threads. (only in threads version)
-T *SIZE* :: Enables tracelogging with in-memory buffer of *SIZE* bytes,
			 suffixes K, M or G can be used
