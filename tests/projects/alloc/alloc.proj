<project target_env="C++"><configuration><build-option name="CC">g++</build-option><build-option name="LIBS" /><build-option name="CFLAGS">-O3</build-option><head-code>
class My {
	public:
		My() : name("-") {
			printf("NEW DEFAULT\n", name.c_str());
		}

		My(std::string name) : name(name) {
			printf("NEW %s\n", name.c_str());
		}
		
		My(const My &amp;other) : name(other.name) {
			printf("CPY %s\n", name.c_str());
		}		
	
		~My() {
			printf("DEL %s\n", name.c_str());
		}
		
		My &amp; operator= (const My &amp;other) {
			if (this != &amp;other) {
				printf("OP= %s %s\n", name.c_str(), other.name.c_str());
				name = other.name;
			}
		}
		
		const std::string &amp; get_name() const { return name; }
	protected:
		std::string name;
};

namespace ca {
	std::string token_name(const My &amp;my) {
		return "My";
	}
	
	void pack(Packer &amp;packer, const My &amp;my) {
		pack(packer, my.get_name());		
	}
	
	template&lt;&gt; My unpack(Unpacker &amp;unpacker) {
		std::string name = unpack&lt;std::string&gt;(unpacker);		
		return My(name);
	}	
}</head-code></configuration><net id="101" name="Main" net-type="main"><edge from_item="102" id="105" inscription="x" inscription_x="-95.0" inscription_y="21.0" to_item="103" /><edge from_item="103" id="108" inscription="x" inscription_x="47.0" inscription_y="21.0" to_item="107" /><edge from_item="107" id="110" inscription="x" inscription_x="105.0" inscription_y="64.0" to_item="109" /><edge from_item="103" id="113" inscription="x" inscription_x="-12.0" inscription_y="-9.0" to_item="112" /><edge from_item="103" id="116" inscription="b" inscription_x="-77.0" inscription_y="59.0" to_item="115" /><edge from_item="109" id="118" inscription="x@1" inscription_x="156.0" inscription_y="95.0" to_item="117" /><edge from_item="117" id="122" inscription="x" inscription_x="242.0" inscription_y="99.0" to_item="119" /><edge from_item="119" id="124" inscription="x@1" inscription_x="315.0" inscription_y="133.0" to_item="123" /><edge from_item="123" id="126" inscription="x" inscription_x="319.0" inscription_y="206.0" to_item="125" /><place id="102" init_string="" name="" place_type="My" radius="20" sx="0" sy="0" x="-157" y="32"><code>	place.add(My("a"));
</code></place><place id="107" init_string="" name="" place_type="My" radius="20" sx="0" sy="0" x="97" y="32" /><place id="112" init_string="" name="" place_type="My" radius="20" sx="0" sy="0" x="-19" y="-48" /><place id="115" init_string="" name="" place_type="My" radius="20" sx="0" sy="0" x="-108" y="112" /><place id="117" init_string="" name="" place_type="My" radius="20" sx="0" sy="0" x="201" y="109" /><place id="123" init_string="" name="" place_type="My" radius="20" sx="0" sy="0" x="300" y="177" /><transition guard="" id="103" name="Fire 1" sx="70" sy="35" x="-18" y="31"><code>	printf("FIRE 1\n");
</code></transition><transition guard="" id="109" name="Fire 2" sx="70" sy="35" x="98" y="109"><code>	printf("FIRE 2\n");
	var.x = My("c");
</code></transition><transition guard="" id="119" name="Fire 3" sx="70" sy="35" x="299" y="109"><code>	printf("FIRE 3\n");
</code></transition><transition guard="" id="125" name="Fire 4" sx="70" sy="35" x="301" y="235"><code>	printf("FIRE 4\n");		
	ctx.quit();
</code></transition></net></project>