#!/usr/bin/env python
import sys
import base.project as project
from base.utils import PtpException
import gencpp.targetenv
import traceback
import argparse

debug_mode = False

target_envs = {
    "C++" : gencpp.targetenv.CppProgram(),
    "C++ library" : gencpp.targetenv.CppLib()
}

def get_generator_from_xml(element):
    return project.load_project(element, target_envs).get_generator()

def main():
    parser = argparse.ArgumentParser(description="PTP - ProjectToProgram compiler")
    parser.add_argument("operation",
                        metavar="OPERATION",
                        type=str,
                        help="Possible values: build, statespace,"
                             "place-user-fn, transition-user-fn")
    parser.add_argument("project",
                        metavar="FILENAME",
                        type=str,
                        help="path to XML file generated by GUI")
    parser.add_argument("--debug",
                        action='store_true',
                        help="Run PTP in debug mode")
    parser.add_argument("--output",
                        metavar="DIRECTORY",
                        type=str,
                        help="Directory where output files are generated")
    args = parser.parse_args()

    if args.debug:
        global debug_mode
        debug_mode = True

    p = project.load_project_from_file(args.project, target_envs)
    generator = p.get_generator()

    if args.output is None:
        output_directory = "."
    else:
        output_directory = args.output

    if args.operation == "build":
        generator.build(output_directory)
    elif args.operation == "statespace":
        generator.build_statespace(output_directory)
    elif args.operation == "simrun":
        generator.build_simrun(output_directory)
    else:
        raise PtpException("Unknown operation")

if __name__ == '__main__':
    try:
        main()
    except PtpException, e:
        print e
        if debug_mode:
            traceback.print_exc(file=sys.stdout)
        sys.exit(1)
