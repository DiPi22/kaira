<project><configuration><parameter default="4" description="" name="SIZE_Y" type="Int" /><parameter default="4" description="" name="SIZE_X" type="Int" /><parameter default="200" description="" name="TEMP" type="Int" /><parameter default="10" description="" name="LIMIT" type="Int" /><function name="to_up" parameters="" return-type="Int" with-context="True">	int x, y;
	iid_to_pos(ctx-&gt;iid(), x, y);
	
	if (y == 0) {
		return pos_to_iid(x, 0);		
	} else {
		return pos_to_iid(x, y - 1);
	}
</function><function name="to_left" parameters="" return-type="Int" with-context="True">	int x, y;
	iid_to_pos(ctx-&gt;iid(), x, y);
	
	if (x == 0) {
		return pos_to_iid(0, y);		
	} else {
		return pos_to_iid(x - 1, y);
	}
</function><function name="to_down" parameters="" return-type="Int" with-context="True">	int x, y;
	iid_to_pos(ctx-&gt;iid(), x, y);
	
	if (y == parameter_SIZE_Y() - 1) {
		return pos_to_iid(x, y);		
	} else {
		return pos_to_iid(x, y + 1);
	}
</function><function name="to_right" parameters="" return-type="Int" with-context="True">	int x, y;
	iid_to_pos(ctx-&gt;iid(), x, y);
	
	if (x == parameter_SIZE_X() - 1) {
		return pos_to_iid(x, y);		
	} else {
		return pos_to_iid(x + 1, y);
	}
</function><build-option name="CC" value="g++" /><build-option name="LIBS" value="" /><build-option name="CFLAGS" value="-O2" /></configuration><net id="101"><area count_expr="#SIZE_X * #SIZE_Y" id="102" name="" sx="685" sy="300" x="20" y="85" /><place id="103" init_string="" place_type="(Double, Int)" radius="20" x="65" y="245"><code>	int x, y;
	iid_to_pos(ctx-&gt;iid(), x, y);
	place-&gt;add(Tuple2_double_int(initial_content(x - 1, y), 0));
	place-&gt;add(Tuple2_double_int(initial_content(x + 1, y), 0));
	place-&gt;add(Tuple2_double_int(initial_content(x, y - 1), 0));
	place-&gt;add(Tuple2_double_int(initial_content(x, y + 1), 0));
</code></place><place id="104" init_string="" place_type="(Int, Double)" radius="20" x="760" y="295" /><place id="105" init_string="" place_type="Double" radius="20" x="465" y="175"><code>	int x, y;
	iid_to_pos(ctx-&gt;iid(), x, y);
	place-&gt;add(initial_content(x, y));
</code></place><place id="106" init_string="0" place_type="Int" radius="20" x="460" y="340" /><transition guard="c &lt; #LIMIT" id="107" name="Compute" sx="70" sy="35" x="345" y="245"><code>	int x, y;
	iid_to_pos(ctx-&gt;iid(), x, y);	
	if (x == parameter_SIZE_X() / 2 &amp;&amp; y == parameter_SIZE_Y() / 2) {
		var.newvalue = parameter_TEMP();
	} else {
		int mul = 4;
		if (x == 0) /*
			 It's a little bit a trick, because we are at the border so one of v1...4 are our own value,
			 and we want a zero, but 4X + 0 = 3X + X
			 */
			mul--;
		if (y == 0)
			mul--;
		if (x == parameter_SIZE_X() - 1)
			mul--;
		if (y == parameter_SIZE_Y() - 1)
			mul--;				
		var.newvalue = (mul * var.value + var.v1 + var.v2 + var.v3 + var.v4) / 8;
	}
//	printf("%g %g %g %g\n", var.newvalue, var.left, var.right, var.up, var.down);
</code></transition><transition guard="" id="108" name="Send results" sx="70" sy="35" x="580" y="295" /><transition guard="" id="109" name="Write results" sx="74" sy="38" x="760" y="220"><code>	int t, size = var.results.size();
	double s[size];
	for (t=0; t &lt; size; t++) {
		s[var.results[t].t_0] = var.results[t].t_1;
		printf("%g\n", var.results[t].t_1);
	}
	
	std::ofstream stream("result.html");
	stream &lt;&lt; "&lt;html&gt;&lt;head&gt;&lt;style type='text/css'&gt;table, tr, td { border: 1px solid; }&lt;/style&gt;";
	stream &lt;&lt; "&lt;/head&gt;&lt;table&gt;\n";
	for (t=0; t &lt; size; t++) {
		if (t % parameter_SIZE_X() == 0) {
			stream &lt;&lt; "&lt;tr&gt;" &lt;&lt; std::endl;
		}
		stream &lt;&lt; "&lt;td&gt;" &lt;&lt; s[t] &lt;&lt; "&lt;/td&gt;" &lt;&lt; std::endl;
	}
	stream &lt;&lt; "&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;\n";	
	stream.close();
	
	ctx-&gt;quit();
</code></transition><edge from_item="107" id="110" inscription="(newvalue, c+1)@to_left(); (newvalue, c+1)@to_right()" inscription_x="45" inscription_y="130" to_item="103"><point x="295" y="150" /><point x="75" y="150" /></edge><edge from_item="108" id="111" inscription="(iid(), value)@0" inscription_x="620" inscription_y="275" to_item="104" /><edge from_item="104" id="112" inscription="~results(#SIZE_X * #SIZE_Y)" inscription_x="770" inscription_y="255" to_item="109" /><edge from_item="103" id="113" inscription="(v1,c); (v2,c); (v3,c); (v4,c)" inscription_x="125" inscription_y="225" to_item="107"><point x="140" y="245" /><point x="250" y="245" /></edge><edge from_item="107" id="114" inscription=" (newvalue, c+1)@to_up(); (newvalue, c+1)@to_down()" inscription_x="55" inscription_y="340" to_item="103"><point x="300" y="330" /><point x="75" y="330" /></edge><edge from_item="107" id="115" inscription="newvalue" inscription_x="376" inscription_y="176" to_item="105"><point x="405" y="205" /></edge><edge from_item="105" id="116" inscription="value" inscription_x="430" inscription_y="215" to_item="107"><point x="425" y="215" /></edge><edge from_item="105" id="117" inscription="value" inscription_x="525" inscription_y="160" to_item="108"><point x="580" y="175" /></edge><edge from_item="106" id="118" inscription="c" inscription_x="440" inscription_y="275" to_item="107"><point x="430" y="290" /></edge><edge from_item="107" id="119" inscription="c+1" inscription_x="380" inscription_y="310" to_item="106"><point x="410" y="305" /></edge><edge from_item="106" id="120" inscription="#LIMIT" inscription_x="530" inscription_y="345" to_item="108"><point x="580" y="340" /></edge></net></project>